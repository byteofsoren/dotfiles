" vim-bootstrap b990cad
set shell=/bin/sh

if has('win32') || has ('win64')
    let $VIMHOME = $VIM."/vimfiles"
else
    let $VIMHOME = $HOME."/.vim"
endif

"*****************************************************************************
"" Vim-PLug core
"*****************************************************************************
if has('vim_starting')
  set nocompatible               " Be iMproved
endif

let vimplug_exists=expand('~/.vim/autoload/plug.vim')

let g:vim_bootstrap_langs = "c,python"
let g:vim_bootstrap_editor = "vim"				" nvim or vim

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Required:
call plug#begin(expand('~/.vim/plugged'))

"*****************************************************************************
"" Plug install packages
"*****************************************************************************
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/grep.vim'
"" Perhaps noot needed and is bugged right now.
"Plug 'vim-scripts/CSApprox'
Plug 'bronson/vim-trailing-whitespace'
Plug 'Raimondi/delimitMate'

" --- GUI modifiers ---
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" --- Vim pane tools ---
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'majutsushi/tagbar'

" --- Debugging tools ---
Plug 'szw/vim-maximizer'
Plug 'puremourning/vimspector'

" Context vim shows in wich context you are working for long function or loops
Plug 'wellle/context.vim'

" --- Utility tools ---
Plug 'mbbill/undotree'
"" Removed aw-watcher-vim due to bug for now take it back later
"Plug 'ActivityWatch/aw-watcher-vim'


" ---- Sytax checkers ----
Plug 'scrooloose/syntastic'
" Plug 'dense-analysis/ale'
" ------------------------
Plug 'Yggdroot/indentLine'
Plug 'avelino/vim-bootstrap-updater'



" --- Navigation ---
"  Vim signature shows the vim marks grapicaly.
Plug 'kshenoy/vim-signature'

" pekaboo shos the registers before yank/pase from regestry when pressing " or @
Plug 'junegunn/vim-peekaboo'


" Vim syntax for kiv
"" Plug 'farfanoide/vim-kivy'
" suround vim
" Plug tpope/vim-suound

" let g:netrw_nogx = 1 " disable netrw's gx mapping.
" nmap gx <Plug>(openbrowser-smart-search)
" vmap gx <Plug>(openbrowser-smart-search)
"





" ---[ Language estensions ]---
" PlantUML
Plug 'weirongxu/plantuml-previewer.vim'
Plug 'aklt/plantuml-syntax'
Plug 'tyru/open-browser.vim'

" --- Arduino ---
Plug 'stevearc/vim-arduino'
Plug 'amal-khailtash/vim-xtcl-syntax', {'for': 'tcl'}

" --- TypeScript usid in native script ----
Plug 'leafgarland/typescript-vim'

" --- OpenScad ---
" Plug 'sirtaj/vim-openscad'

" --- ROS --
" Plug 'chenzhiwo/ycm-extra-conf-ros'
"
" --- LaTeX ---
Plug 'lervag/vimtex'
"Plug 'dpelle/vim-LanguageTool'
"Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
Plug 'rhysd/vim-grammarous'

" --- VimWiki ---
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'mzlogin/vim-markdown-toc'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'tools-life/taskwiki'
Plug 'farseer90718/vim-taskwarrior'

" --- Markdown viewer ---
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}


" Ã¶vrigt
" Plug 'sheerun/vim-polyglot'

if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
let g:make = 'gmake'
if exists('make')
        let g:make = 'make'
endif
Plug 'Shougo/vimproc.vim', {'do': g:make}

"" Vim-Session
set shell=/bin/sh
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

if v:version >= 703
  Plug 'Shougo/vimshell.vim'
endif

if v:version >= 704
  "" Snippets
  Plug 'SirVer/ultisnips'
endif

"" Snippets provided by honza
Plug 'honza/vim-snippets'

"" Color
" Plug 'tomasr/molokai'
Plug 'joshdick/onedark.vim'
" let g:lightline = {
" \ 'colorscheme': 'onedark',
" \ }

"*****************************************************************************
"" Custom bundles
"*****************************************************************************
"You complete me
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clangd-completer' }

" ycm keybindings to fix tab completion
Plug 'ervandew/supertab'

" c
"Plug 'vim-scripts/c.vim', {'for': ['c', 'cpp']}
"Plug 'ludwig/split-manpage.vim'


" python
"" Python Bundle
"Plug 'davidhalter/jedi-vim'
"Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}

" Arduino cofigurations
"let g:arduino_cmd =  '/usr/share/arduino/arduino'
let g:arduino_home_dir = $HOME . ".arduino15"
"


"Tex conseal turn off because its anoiying
" let g:tex_conceal = ''
" let g:vimtex_syntax_conceal_default = 0
" let g:vimtex_syntax_conceal = { 'accents' : 1 }
" let g:vimtex_syntax_conceal = []

"*****************************************************************************
"*****************************************************************************

"" Include user's extra bundle
if filereadable(expand("~/.vimrc.local.bundles"))
  source ~/.vimrc.local.bundles
endif


call plug#end()

" Required:
filetype plugin indent on


" session management
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

" Disable youcompleteme for vhdl files as it do not support it:
let g:ycm_filetype_blacklist = {
            \ 'vdhl':1
            \}

" Open buffes as tabs
set switchbuf=usetab

" fix bracet error in LaTeX
let g:tex_matchcheck= '[{}]'

"" vimspector multi language graphical debugger keyboard setup
" let g:vimspector_enable_mappings = 'HUMAN' "<- Leve comented have own config.
let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-bash-debug', 'CodeLLDB' ]

"" Activity watch start
" autocmd VimEnter * AWStart

" python
" vim-python
augroup vimrc-python
  autocmd!
  " autocmd FileType python highlight MyGroup ctermfg=green
  " autocmd FileType python match MyGroup /breakpoint/
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

augroup remember_folds
    autocmd!
    autocmd BufWinLeave ?* mkview | filetype detect
    autocmd BufWinEnter ?* silent loadview | filetype detect
augroup END

" let g:vimwiki_global_ext = 0
" let g:vimwiki_ext2syntax = {'.wiki': 'markdown', '.md':'markdown'}

